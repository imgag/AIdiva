## AIdiva -- Augmented Intelligence Disease Variant Analysis
# Configuration file specifiying all the parameters that are needed to run AIdiva in the different modes
# if you modify the key names make sure to also update them in the run_AIdiva.py script
---
Analysis-Input:
    # if inheritance should be considered and family information is provided, make sure that the vcf file contains sample informations for all family members,
    # else sample will be treated as single patient with unknown inheritance
    #vcf-indel: /mnt/users/ahboced1/Masterarbeit/test_data/trio_variant_call_simulated_variant_recessive_snp.vcf
    #vcf-snp: /mnt/users/ahboced1/Masterarbeit/test_data/trio_variant_call_simulated_variant_recessive_indel.vcf
    vcf: test_with_sample_information_sorted.vcf

    # path to the working directory
    work-dir: test_workdir2/

    # path to the reference assembly used during the expansion of the indels
    ref-path: grch37/

    # trained scoring models used to predict the pathogenicity score
    # if no trained model is present you can use the train_model.py script to train a new custom model
    scoring-model-snp: rf_snp_clinvar_hgmd_1to1.pkl
    scoring-model-indel: inframe_indel_clinvar_hgmd_balanced.pkl

    # bed file to distinguish between coding and non-coding variants
    coding-region: Homo_sapiens_coding-sequences.GRCh37.87.bed

    prioritization-information:
        # file containing the HPO terms that are associated with the disease (one term per line)
        hpo-list: recessive_HPO.txt

        # family type, shows the structure of the given family inforamtion
        # possible values: [TRIO, FAMILY, SINGLE]
        family-type: TRIO

        # file with the family information
        family-file: family.txt

        # List of genes that should be excluded in the analysis, because they are normally false positives
        # None or path to the file
        gene-exclusion: empty_list.txt

        # Identifier to get the score from the annotated file
        cadd-identifier: CADD_PHRED
        repeat-identifier: simpleRepeat
        duplication-identifier: segmentDuplication


Model-Features:
    # List containing the names of the allele frequency sources (populations) that are present in the data set (the MaxAF will be based on these) if not wanted use a empty list "[]" instead
    allele-frequency-list:
        - gnomAD_AFR_AF
        - gnomAD_AMR_AF
        - gnomAD_ASJ_AF
        - gnomAD_EAS_AF
        - gnomAD_FIN_AF
        - gnomAD_NFE_AF
        - gnomAD_OTH_AF
        - gnomAD_SAS_AF
        - AA_AF
        - EA_AF
        - AFR_AF
        - AMR_AF
        - EAS_AF
        - EUR_AF
        - SAS_AF

    # List containing the names of the features used for the model training
    feature-list:
        - SIFT
        - PolyPhen
        - REVEL
        - CADD_PHRED
        - ABB_SCORE
        - MAX_AF
        - segmentDuplication
        - custom_EIGEN_PHRED
        - fannsdb_CONDEL
        - custom_FATHMM_XF
        - custom_MutationAssessor
        - phastCons46mammal
        - phastCons46primate
        - phastCons46vertebrate
        - phyloP46mammal
        - phyloP46primate
        - phyloP46vertebrate

VEP-Annotation:
    # Flag indicating whether to annotate the input data with VEP or not, if False then AIdiva assumes that the data is already annotated
    perform-vep-annotation: True

    # VEP: path to the VEP executable
    vep: /mnt/share/opt/ensembl-vep-release-98.3/vep

    # threads to use during the annotation
    num-threads: 4

    # Cache directory and plugin directory
    cache-path: /mnt/share/data/dbs/ensembl-vep-98/cache
    plugin-path: /mnt/users/ahboced1/Tools/vep_data/plugins

    # CADD: paths to the CADD database files
    cadd-snps: /mnt/share/data/dbs/CADD/whole_genome_SNVs.tsv.gz
    cadd-indel: /mnt/share/data/dbs/CADD/InDels.tsv.gz

    # Condel: path to the Condel config
    #condel: /mnt/users/ahboced1/Tools/vep_data/plugins/config/Condel/config

    # REVEL: path to the REVEL database file
    revel: /mnt/share/data/dbs/REVEl/revel_all_chromosomes.tsv.gz

    # dbNSFP
    #dbNSFP: /mnt/users/ahbranl1/data_vep/dbNSFP/dbNSFP_hg19_3.5.gz

    custom:
        # BED like files here the key of the dictionary is used as the name to present the feature in the annotated file
        bed-files:
            simpleRepeat:
                file: /mnt/users/ahboced1/databases/hg19/simpleRepeats.bedGraph.gz
                method: overlap
            segmentDuplication:
                file: /mnt/users/ahboced1/databases/hg19/segmentDuplication.bedGraph.gz
                method: overlap
            ABB_SCORE:
                file: /mnt/users/ahboced1/databases/hg19/abb_score.bedGraph.gz
                method: exact
        # VCF files the key of the dictionary is used to identify the feature in the INFO column of hte VCF file
        vcf-files:
            EIGEN_PHRED:
                file: /mnt/users/ahboced1/databases/hg19/Eigen_phred_hg19_chrom1-22.vcf.gz
                method: exact
                prefix: custom
            CONDEL:
                file: /mnt/users/ahboced1/databases/hg19/fannsdb_onlyCONDEL.vcf.gz
                method: exact
                prefix: fannsdb
            FATHMM_XF:
                file: /mnt/users/ahboced1/databases/hg19/fathmm_XF_onlyCoding.vcf.gz
                method: exact
                prefix: custom
            MutationAssessor:
                file: /mnt/users/ahboced1/databases/hg19/MA_scores_rel3_hg19_full.vcf.gz
                method: exact
                prefix: custom
        # Bigwig files the key of the dictionary is used as the name to present the feature in the annotated file
        bigwig-files:
            phastCons46mammal:
                file: phastCons46mammal.bw
                method: exact
            phastCons46primate:
                file: phastCons46primate.bw
                method: exact
            phastCons46vertebrate:
                file: phastCons46vertebrate.bw
                method: exact
            phyloP46mammal:
                file: phyloP46mammal.bw
                method: exact
            phyloP46primate:
                file: phyloP46primate.bw
                method: exact
            phyloP46vertebrate:
                file: phyloP46vertebrate.bw
                method: exact


Additional-Annotation:
    # Flag indicating whether to use the additional annotation scripts or not, if False it is assumed that the needed annoation was performed beforehand
    perform-additional-annotation: True

    # ABB_score ([path to the file] or null)
    abb-score: null

    # Simple tandem repeats ([path to the file] or null)
    simple-repeats: null

    # Segment Duplication ([path to the file] or null)
    segment-duplication: null

    # additional annotations the key is used as feature name for the prediction
    additional-bigwig-files:
        #phyloP46mammal: /mnt/users/ahboced1/databases/hg19/phyloP46mammal.bw
        #phyloP46primate: /mnt/users/ahboced1/databases/hg19/phyloP46primate.bw
        #phyloP46vertebrate: /mnt/users/ahboced1/databases/hg19/phyloP46vertebrate.bw
        #phastCons46mammal: /mnt/users/ahboced1/databases/hg19/phastCons46mammal.bw
        #phastCons46primate: /mnt/users/ahboced1/databases/hg19/phastCons46primate.bw
        #phastCons46vertebrate: /mnt/users/ahboced1/databases/hg19/phastCons46vertebrate.bw


Analysis-Output:
    out-filename: aidiva_result_with_annotation


# make sure that the full path for the following files is present otherwise the prioritization step will fail
Internal-Parameters:
    hpo-resources: /mnt/users/ahboced1/AIdiva_project/HPO_resources/
    #gene2hpo-mapping: /mnt/users/ahboced1/AIdiva_project/HPO_resources/gene2hpo.pkl
    #hpo-graph: /mnt/users/ahboced1/AIdiva_project/HPO_resources/hpo_graph.pkl
    #hpo2gene-association: /mnt/users/ahboced1/AIdiva_project/HPO_resources/hpo2gene.pkl
